Part 6.

This is the 5th contract in the Solidity tutorial.

https://www.youtube.com/watch?v=ipwxYa-F1uY&t=44s

This is where I'll write notes and at the end of the tutorial, I'll
explain the code line by line and explain what it's doing.

//------------------------------------------------------------------

Part 6.

We're going to go over two topics in this tutorial.

How to use both Math and Libraries in Solidity.

1. Libraries.
2. Math.

We use libraries to manage math in Solidity frequently.

A library is a way to organize code that can be used in multiple 
places inside your project.

We basically use it to DRY our code.

DRY is an acronym for Don't Repeat Yourself.

For example, if we have a function that we're going to use inside of
multiple smart contracts we can create a library

One of the main benefits of using a library is that if we're using 
multiple smart contracts, and if we're using the same function in all
of them, then if we have to change one function, then we change it 
once in the Library.

Libraries have similar syntax as a contract, but they don't have the
same functionality.

You can't inherit from a library, at the end of the day, the library
is made to be used inside of the smart contract.

So for example lets declare a divison function in our smart contract.

function calculate (uint _value1, uint _value2) public {
    value = _value1 / _value2;
}

So, here's a question, what happens when value 2 is zero?

It will throw a division error.

So since we don't want that division error, we can define that 
function in a library.

function divide(uint256 a, uint256 b) internal pure returns (uint256) {
    requre(b > 0);
    uint256 c = a / b;
    return c;
}

So with this function, we can divide two integers and we can handle
the error.

This is a super common use case for libraries in Solidity.

When we compile myContract, the Solidity compiler knows that the 
contract is dependant upon the Math library, so it is compiled with 
the smart contract, and is depoloyed automatically. (Remix??)

This is a basic example of calling a function from a library.

We don't necessarily have to have the library defined inside of the 
smart contract.

What we can do is that we can define the library in another file and 
import it.

import "./Math.sol";

Use double quotes for the file name, and the '.' is used to 
refer to the current directory.

// One more thing we're going to check out.

There is a library by openzeppelin - Solidity, and it's called
SafeMath.sol.

This library implements a lot of helpful functions in this library.

Using this SafeMath.sol library, we can use the functions directly 
on the unsigned integers.

So, when we have a library in the same directory as us, we can use
the following line of code to import it.

import "./SafeMath.sol";

This library has multiple useful functions that are very useful.

using this statement:

using SafeMath for uint256;


One of the abilities is this.


Instead of this code:

value = Math.divide(_value1, _value2);

we can use this:

value = _value1.div(_value2);

// Personal note:

My issue with Gregory at dApp university is that he dosent fully 
explain how it works completely, and leaves things unexplained, 
but I guess that's what I get for free training right? :)




Here's the code after the tutorial:


------ myContract -----------
pragma solidity ^0.5.1;


import "./Math.sol";

contract myContract {
    
    using SafeMath for uint256;


    
    uint256 public value;

    function calculate(uint _value1, uint _value2) public {
        value = Math.divide(_value1, _value2);
        // value = _value1.div(_value2);
    }
}

----------- Math Library -------------

pragma solidity 0.5.1;


library Math {
    function divide(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0)
        uint256 c = a / b;
        return c;  
    }
}

===============================================================

The contracts explained.

===============================================================


------ myContract -----------


pragma solidity ^0.5.1;

// This is the solidity version declaration, this tells the 
compiler which version to use with this code.

// pragma solidity are declaration keywords.



import "./Math.sol";

// This line is used to import the Math.sol library.

// Import declaration keyword, We have to use double quotes for 
import path, the '.' stands for current directory, so it will 
look for this Math.sol file in the same directory as the contract
we're writing right now.



contract myContract {

// This is the beginning of the contract, it declares the contract 
type and the variable name of the contract to the compiler.

// Contract declaration, myContract variable name.

    
    using SafeMath for uint256;

    // ZZZZZzzzzzzzzzz

    
    uint256 public value;
    
// Data type uint256, (integer) public visibility, variable
name value.



    function calculate(uint _value1, uint _value2) public {

// This is a function to calculate, we have two uint values that
we'll input, and we'll return with an output.

// Function declaration, calculate variable name, 
uint (data type) variable name, uint (data type) variable name




        value = Math.divide(_value1, _value2);

// In this we're assiging the variable name to the result 
of this line of code.

// Math.divide(_value1, _value2); 
This line, is telling the compiler where to go to find the function
code.

Math. is the library declaration, .divide is the function call
for that library.

(parameters).


        // value = _value1.div(_value2);

This is the code for using the SafeMath.sol library from OpenZeppelin
and it greately simplifies the code and how we write it out.

    }
}

----------- Math Library -------------



pragma solidity 0.5.1;

// Solidity version declaration.



library Math {

library declaration keyword, Math is the variable name for it.

    function divide(uint256 a, uint256 b) internal pure returns (uint256) {

function declaration, function variable name, (parameters)
// Internal visibility, this means that the code can only be called by the
contract the function resides in, or by a child contract.


   
   
        require(b > 0)
// Require is used for error handling, and in this case its needed to
make sure that B is larger than zero, so we won't throw an error.

        uint256 c = a / b;

        
        return c;  
    }
}
