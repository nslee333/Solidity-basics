This is the thrid contract for this Solidity tutorial.
https://www.youtube.com/watch?v=ipwxYa-F1uY&t=44s


//----------------------------------------------------------------

In this video, we're going to go over how to write a function that
accepts ether.

How can we send Ether in when we call function and do stuff with it.

First we're going to create a function called buyToken.

This function is going to emulate what happens at an ICO, or a crowd
sale or pre-sale on Ethereum when you buy ERC-20 tokens.

We're going to create a way to track the persons balance.

We're going to do that with a mapping (associative array), with the
address being the key and the value being a uint.

We are going to set the visibility of the array to public.

In the buyToken function we're going to modify the data in the 
balances array, and whenever the person buys the token we're going
to increase the balance count by one.

balances[msg.sender] += 1;

We want to transfer the funds that are sent into the smart contract 
to a wallet.

First we keep track of the wallet, and we want to send funds to This
wallet.

address wallet;

What we're trying to do here is transfer the funds that are sent in 
by this function to this wallet.

in the wallet.transfer(msg.value), the msg.sender tells us how much 
ether is being sent in by the person whos calling this function.

In order for this function to accept payment we need to add the 
modifier 'payable'.

With out this modifier Solidity won't allow us to send Ether in with
the transaction.

This is how we declare that this function will accept Ether.

There is a new Solidity update as of this video .
(Please note: this video is several years old, so keep that in mind.)

This Solidity update requires explicitness whenever you're declaring
an address that can accept Ether inside of a smart contract.

We do this by adding the keyword 'payable' to the adress wallet 
declaration.

address payable wallet;

And also in the constructor parameters we'll add payable to it.

(address payable _wallet).

So now we're going to create a fallback function.
It's going to act like a default function that you can wrap this
in.

This is super basic stuff, an actual ICO would be much much more 
involved than what we're building here.

To write a fallback function we're going to write it like 
this.

We're going to wrap this fallback function around the buyToken()
funtion.

function() external payable {
    buyToken();
}

This external modifier is a new one we haven't explored yet.

It's different because public modifier can be called inside of our
smart contract, as well as outside.

However the external modifer only allows functions to be called 
outside of the smart contract.

We don't want to call this function inside the smart contract.

//-----------------------------------------------------------


Events in Solidity.

//-----

Declaring the Event

//-----

Now we're going to talk about events in Solidity.

Events are a way for external consumers to listen for things that 
happen on a smart contract.

Basically external consumers can subscribe to events on a smart 
contract and wait for something to happen.

So we'll do inside this buyToken function, watch it trigger an
event that lets anyone on the Blockchain to know when a token has 
been purchased from the Smart Contract if they were to listen for it
(subscribed). 

So we're going to create an event trigger inside the buyToken function.

So we'll define the event like so

event Purchase(
    address _buyer,
    uint256 _amount,
);

So now we'll add the event trigger to the buyToken function,
allowing other people to see how often its been bought.

-- Event Trigger --


emit Purchase(msg.sender, msg.value);

In this instance, we'll just pass in the _amount as 1, 
since you can only purchase one at a time, but hypothetically we can
assign a variable to the amount the buyer wants to purchase, and pass 
that in as _amount argument.

We'll pass in the msg.sender value as the argument for the buyer,
and we'll pass in 1 as the argument for the _amount parameter for the
event trigger Purchase().


-- Indexing Events -- 


Another thing you can do with Events is that you can create an index

'address indexed _buyer' 

And that will allow you to filter events that are only from certian
buyers.

Like for example if you wanted to listen to events on the contract
from a certian person, or a specific address.

We'll take a look at that next.

emit Purchase(msg.sender, 1);

So what are events for then?

Theres two main cases for an 'Event'.

Because of the Asynchronous nature of the Blockchain you're building
an application that talks to the smart contract you might call a 
function like buyToken, 

if you're writing a JS application, you might call this function
and then your application would just know that you called this 
function but you might want to wait for this to finish and execute
and wait for this event to be emitted.

You can filter for the events that are applicable to you and whenever
that happens you can wait for that to happen and then reload your
application state whenever that events been triggered.

So that's one popular use case,

Another use case is that you can get the entire event stream from a 
smart contract like this so you basically see all of the purchase 
events because they're listed in these logs, (in remix, they are 
listed under transactions.)

//-----------------------------------------------------------------

End of Part 5.

Here's the unedited code:

pragma solidity 0.5.1;


contract myContract {
    mapping(address => uint256) public balances;
    // mapping, user address which is key, and the value is the 
    // balance of the account, public visibility and the mapping 
    // variable name is balances.
    address payable wallet;

    event Purchase(
        address _buyer,
        uint256 _amount
    );

    constructor(address payable _wallet) {
        wallet = _wallet;
    }

    fallback() external payable {
        buyToken();
    }


    function buyToken() public payable {
        // Buy a token.
        balances[msg.sender] += 1;
        wallet.transfer(msg.value);
        // Send ether to the wallet.
        emit Purchase(msg.sender, 1);


    }
}

//-----------------------------------------------------------------

Going to explain the code here:

//------------------------------------------------------------------



// SPDX-License-Identifier: MIT

// This is the SPDX license Identifier, basically Solidity 
uses a warning to encourage users to identifiy what type of
license being used, making it easier for people to indenfity how
they can use your code when it is open-source.

pragma solidity 0.5.1;

// Solidity smart contracts always need the Solidity compiler version
specified to make sure the compiler will operate correctly with the code.


contract myContract
// contract declaration, contract variable name.

{
    mapping(address => uint256) public balances;
// Mapping declaration (data structure that focuses on key value
pairs.), 

// address is the key, and the uint256 is the data type 
the value will be stored with.

// public is the visibility of the function, public states that 
anyone on the blockchain can call this function.

// ballances is the variable name of the mapping.
(All the mapping key value pairs will be stored under the
variable name balances.)

// the user (address) is the key, and the value (uint256) is the 
balance of the account.


    address payable wallet;

// In this line, you're assigning variable name wallet to a 
specific address.
// address is the inderlying data.???????????????????
// Payable is a function declaration, this 


ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ



    event Purchase(
        address _buyer,
        uint256 _amount
    );

    constructor(address payable _wallet) {
        wallet = _wallet;
    }

    fallback() external payable {
        buyToken();
    }


    function buyToken() public payable {
        // Buy a token.
        balances[msg.sender] += 1;
        wallet.transfer(msg.value);
        // Send ether to the wallet.
        emit Purchase(msg.sender, 1);


    }
}


















