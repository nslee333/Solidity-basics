Personal note:

This is my notes from this video tutorial from dApp university.

https://www.youtube.com/watch?v=ipwxYa-F1uY&t=44s

My goal with this is to learn the code, write notes down that I 
can reference later.

At the end of the tutorial, I will:

1. Write down the beginning code, and the end code.
2. I will write out two copies of the code.
    1. The unexplained code.
    2. The explained code, the goal is to get myself familiar on
    how to explain the code, how it works and the proper syntax and
    nomenclature.
3. I will go through the contract and explain how it works, the syntax
and the direct nomenclature of the syntax.

//----------------------------------------------------------------

Beginning contract.

// SPDX-License-Identifier: MIT

pragma solidity 0.5.1;

contract myContract {
    mapping(address => uint256) public balances;
    // mapping, user address which is key, and the value is the 
    // balance of the account, public visibility and the mapping 
    // variable name is balances.
    address payable wallet;

    event Purchase(
        address _buyer,
        uint256 _amount
    );

    constructor(address payable _wallet) {
        wallet = _wallet;
    }

    fallback() external payable {
        buyToken();
    }


    function buyToken() public payable {
        // Buy a token.
        balances[msg.sender] += 1;
        wallet.transfer(msg.value);
        // Send ether to the wallet.
        emit Purchase(msg.sender, 1);


    }
}


// Start of the tutorial.

In this tutorial we're going to go through how to use multiple 
smart contracts in the Solidity programming language.

We're going to write two seperate Smart Contracts, one that will
talk to the other and also show you how to understand parent-child.
relationships with Smart Contracts.

(Basically we'll talk about inheritance.).

We're going to keep the scenario where we're going to buy the token.

Instead of keeping track of the balance inside of this Smart Contract,
we're going to spilt the contract into two.

We'll move the balance code into a Token contract, and the buyToken

This is again, going to be a super basic example, it won't be an 
ERC-20 compatible token, but it will be a functional example.

We'll explore how two contracts call one another at a very simple 
example.

Starting with the Token contract, we'll start with defining the
contract.

contract ERC20Token.

We'll declare a state variable 'name', and we'll give it the
public visibility. 

string public name;

We're going to transfer the balances mapping.

mapping(address => uint256) public balances;

We're going to take the balance increment function, and put it into
it's own function.

We're also going to write ++ instead of += 1.

We took out the purchase event to simplify the code.

Inside of the ERC20 contract, we want to mint tokens.

We want to call the ERC20 contract in the buyToken() function.

Since both contracts are in the same file, they know that each other 
exists.

We can be basically explicit and tell this contract if you want to mint
tokens in this contract.

In order to do that there's a few things we need.

We need to know the address of this contract which is deployed because
both contracts will have seperate addresses since they can only be 
deployed seperately.

myContract needs to know about the ERC20Token contract's address.

Then we'll basically reference the smart contract with the address.

And we'll kindof get an instance of it and then we'll call the mint
function on it.

This is a two step process.

1. We need ERC20Token's address so that myContract can reference it.
2. Then we need to instansiate myContract.
3. We call the mint() function.

First we'll get access to this Token address, we'll say address token
in the parameters of the constructor function.

We'll also give it the public visibility.

constructor (address payable _wallet, address _token) public {
    wallet = _wallet;
    token = _token;
}
    
So with that, we have the address, we need to get an instance of it.

So we're instanciating the contract with calling the
ERC20Token(); call inside of the buyToken() function call.

We do that by passing in the Token address that we've kept track of
here.

Since ^0.5 requires explicitness, we'll add in 

ERC20Token(address(token));

Basically with instantiating the ERC20Token, in this case, its 
deployed, and calling this address, we'll use this token to call the
mint function. 

All of this we can assign to a variable, and with Solidity we have to
specifiy the data type.

The data type will be ERC20Token, and this is a local variable not 
a state (global) variable, so we're going to prepend it with an
underscore.

ERC20Token _token = ERC20Token(address(token));

// Heres a breakdown of the syntax, ERC20Token is the data type.
_token is the variable name, and the ERC20Token(address(token) is the
location of that token variable??????????????????????????



Now we can mint the token like this.

_token.mint();

Now we can call this by token function from this smart contract, and
you'll call the mint() funciton from the ERC20Token contract.

// Personal note:

This point in the tutorial, I ran into an error, that I'm not sure how
to deal with at this point in my Education, so I'm passing over it at
this point, and I'll try to revisit it at some point.

// Sooo, in the tutorial, he uses the buyToken() function, and the
transaction goes through, only the issue is that since I cannot
run that function due to the error I keep getting, I can't fully 
experience this myself.

Keep in mind, we deployed two contracts in remix with this file, 

1. the ERC20Token contract.
    has the:
        mint() function,
        name state variable,
        and also has the balances mapping.
2. the myContract.
    has the:
        buyToken() function.

In the tutorial, he uses the buyToken, the transaction goes through
but the balance of that specific address does not go up.

However, when uses the mint() function on the ERC20Token, the
balance does go up.


Basically he goes on to say that the msg.sender function can sometimes
mess you up when you call a function from SC1 in SC2.

Earlier when you call the mint() function directly, the balance goes
up.

This is because msg.sender in this case is the address of contract that
called the function, NOT who sent it.

So we can get the address of the contract/person who sent the initial
tranaction with the tx.origin function.

that will actually mint functions for whoever initiates the transaction

So if we call Mint function from the ERC20Token contract, it'll
increment the balance, and if we call it from the myContract it'll 
also increment the balance of the person/contract who called the
buyToken() function.

So the msg.sender function can be a real gotcha when dealing with
multiple smart contracts interacting with each other.

tx.origin always refers back to the person who originated the 
transaction, even if a smart contract is calling the function.

So be aware of that potential snag with dealing with smart contracts
that talk to each other.

One last thing we can learn, is the shorthand for the following:

function buyToken() public payable {
    ERC20Token _token = ERC20Token(address(token));
    _token.mint();
    wallet.transfer(msg.value);
}

We can eliminate the variable assignment, and call the mint() 
function directly on it.

function buyToken() public payable {
    ERC20Token(address(token)).mint();
    _token;
    wallet.transfer(msg.value);
}

This will do the exact same thing as the code above.

//---------------------------------------------------------

copy of the code before we change topics.

//---------------------------------------------------------


// SPDX-License-Identifier: MIT

pragma solidity 0.5.1;

contract ERC20Token {
    string public name;
    mapping(address => uint256) public balances;

    function mint() public payable {
        balances[tx.origin] ++;

    }
}

contract myContract {

    address payable wallet;
    address public token;

    constructor(address payable _wallet, address _token) {
        wallet = _wallet;
    }

    fallback() external payable {
        buyToken();
    }

    function buyToken() public payable {
        ERC20Token _token = ERC20Token(address(token));
        _token.mint();
        wallet.transfer(msg.value);
        // Send ether to the wallet.
    }
}


//------------------------------------------------------------

Inheritance.



Alright so now we're going to move onto the next topic which is
how to inherit smart contract, or inheritance.

Inheritance, or having a parent-child relationship.

Now creating a token that inherits from this basic ERC-20 token, is 
to do two things.

So we'll keep the same functionality, and we'll give this token
a second token below.

So we inherit using the code below.

contract myToken is ERC20Token {

}

So let's customize this token, the first thing we can do is override
the name.

string public name = "My Token";

So this is basic inheritance, if it is defined a second time, it is 
overwritten.

In other words the code in the child contract can override the parent
contract.

In the myToken contract we were able to still use some of the
parameters of the parent contract, and still redefine some of the 
child functions.

(Parent constructor)

    constructor(string memory _name) public {
        name = _name;
    }

(Child constructor)

contract myToken is ERC20Token {
    string public _symbol;

    constructor(
        string memory _name,
        string memory _symbol
    )
        ERC20Token(_name)
    public {
        symbol = _symbol;
    }
}

So that's how you override costructors from parent contracts.

Now let's override the mint() function inside as well.

Let's add some extra behavior, we want to preserve this mint() 
function we still want to keep track of the balance.

We also want to do some extra stuff.

Let's keep track of the people who actually own the tokens.

So we'll create a counter cache of the people who own the Tokens.

So what we're going to do is that we're going to keep the 
same functionality of the mint() token, but adding to it as well.

So we're going to keep the same functionality of the mint() 
function from the parent contract using the following code.

function mint() public {
    super.mint(); // This inherits the parent mint() functionality.
    ownerCount++; // Adds to the count of owners.
    owners.push(msg.sender); // pushes the msg.sender (In other words
    the contract / person who executed the contract. ) to the owners array.
}

Alright so that is how we inherit contracts in Solidity.

Code after the tutorial:

// SPDX-License-Identifier: MIT

pragma solidity 0.5.1;

contract ERC20Token {
    string public name;
    mapping(address => uint256) public balances;

    function mint() public payable {
        balances[tx.origin] ++;

    constructor(string memory name) public {
        name = _name;
    }

}


contract myToken is ERC20Token {
    string public _symbol;

    address[] public owners;
    uint256 ownerCount;

    constructor(
        string memory _name, 
        string memory _symbol
    ) 
        ERC20Token(_name)
    public {
        symbol = _symbol;
    }

    function mint() public {
        super.mint();
        ownerCount++;
        owners.push(msg.sender);
    }

}


//-------------------------------------------

The contracts explained.

// SPDX-License-Identifier: MIT

// License identifier, this is encouraged by the Ethereum foundation
and Remix to let other developers know exactly what they can do 
with your source code.


pragma solidity 0.5.1;

// Pragma Solidity declaration is to help the compiler 
figure out which version of Solidity the code is written in
for proper compiler operation.



contract ERC20Token {
    
// contract declaration, this is the beginning of the first 
smart contract.

// contract keyword declaration, contract variable name.
    
    
    string public name;
    
    // State variable declaration, essentially it is a global variable 
    that with the public modifier it can be accessed by any address, contract
    or person on the blockchain.

    // String is the data type, public is the visibilitiy modifier, and the
    name is the variable name.
    
    mapping(address => uint256) public balances;

    // This is a mapping, mappings are essentially a data structure that
    functions as a key, value data structure. Very similar to Python's 
    dictionary.

    // In this example, it's used to store the addresses and their correlating
    token balance.

    // This will help us later with minting the tokens, and adding the Tokens
    to their addresses.

    // mapping key word, (address => uint256) (key, value), public visibility
    modifier, mapping variable name 'balances'.

    function mint() public payable
    
    // This is a function declaration of the mint() function,
    it will be the function that we will call when we buy the tokens.

    // function keyword, function variable name 'mint', public visibilitiy 
    modifier, payable function modifier.

    // The payable function modifier is a special modifier that allows
    function to recieve or send Ether.
    
    {
        balances[tx.origin] ++;

        // This line of code increments the balance amount of the account
        who is calling the mint() function.

        // balances is the mapping described above, this code is Writing
        to the mapping, using the tx.orign as the address, it increases the
        count by one.

        // balance mapping call, [tx.origin] is the address of the person 
        executing the contract, and calling the mint() function, 

        // ++; is shorthand in Solidity for adding 1;

        // tx.origin is kinda complicated, but I'll explain it a little
        here.

        // tx.origin is the initiator of the first transaction.

        // Personal note: tx.origin is going to be removed, because of security issues, so I'll be passing on explaining it, since the explinations
        are murky at best.



    constructor(string memory name) public {
        name = _name;
    }

    // This constructor function, is called once when the contract is deployed, its mainly used to initialize state variables, and to help with
    security by defining the address.

    // Here we're calling the constructor function, and we have parameters set up for a string, thats stored in memory, and it's variable name is name.

    // Constructor declaration, function parameters (inside the parentheses), public keyword (Any Address or Contract, inside or out of the contract
may call this function)
    // name = _name; is the state variable initialization. (In other words, its assigning them to each other, setting them in stone.) 
        (In computer programming, initialization (or initialization) is the assignment of an initial value for a data object or value.)
        (To set(something, such as a computer program counter) to a starting position, value or configuration.)
}


contract myToken is ERC20Token {
    string public _symbol;

    address[] public owners;
    uint256 ownerCount;

    constructor(
        string memory _name, 
        string memory _symbol
    ) 
        ERC20Token(_name)
    public {
        symbol = _symbol;
    }

    function mint() public {
        super.mint();
        ownerCount++;
        owners.push(msg.sender);
    }

}


