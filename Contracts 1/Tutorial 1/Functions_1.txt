

// This is a youtube tutorial by Dapp University I'll link it down below.
// The companion code is MyContract.sol.

// https://www.youtube.com/watch?v=ipwxYa-F1uY&t=44s



// -----------------------------------

// Introduction


// Solidity is a contract-oriented, high level programming language for implementing smart contracts.
// It is is influenced by C++, Python and Javascript.

// Smart contracts are the main way you organize code, store data and write all of your programming logic. 

// Solidity is used to run on the Ethereum Virtual Machine. Which is the engine that is used to run the code on the 
// Ethereum Blockchain.

// Solditiy is statically typed, it supports inheritance libraries and a bunch of other stuff.

// a Smart Contract is code that gets executed on the blockchain.
// So in this case, the Ethereum Blockchain.


// This Smart Contract is kind of like a mircoservice out on the web.
// It's accessible to everyone on the Blockchain. 

// So since it's on the Ethereum Blockchain, everyone will be able to see the smart contract.
// Anyone can see, or use the smart contract, they'll be able to read and write data with it.
// And also execute any code inside of here.
// It's all public.


// Its a microservice because it's more than just a class in an object-oriented system.
// It's publically accessible. 

// ----------------------------------------


// function get();

// When we write the string value, we are actually writing data to the Blockchain.
// The Variable in the string is stored in this smart contract.
// It's different from an local variable inside of a function, that would only be local to that function scope.

// This value is stored on the blockchain.

// Setting the visibility of this function, setting the function to public
// Expands the visibility or the scope of the function

// the public keyword makes the function visible and usable by anyone who
// has access to the smart contract on the blockchain not just inside this contract.

// Returns string character, this tells our function that we will always return a 
// string datatype.

// The value type is declared as a string in the function 

// ----------------------------------------------------

// function set();

// One thing to note is that on this second function, we used an underscored
// '_value' parameter so that we don't get the 'value' from the first function mixed 
// in the contract.

// The string 'value' declaration at the top of the contract is the state variable.
// The 'value', is a state variable, which is being written to and stored on the Blockchain.

// Solidity knows that the '_value' is a local variable because I passed it in and prepended
// and underscore to the beginning of the variable.

// Also note that we declared the data type of function argument we need that
// inside solidity because it needs to know the type of the data that is getting
// passed in.

// Okay so now, we have two functions in this smart contract. 
// One to read the value and a function to set the value, (Or write the value if you prefer.).

//-------------------------------------------------------

// Constructor function.

// The next thing we're going to learn is how to set this value whenever we deploy this smart contract 
// Or whenever its generated for the first time. 

// We're going to do this with a constructor function.

// So if you're familiar with other programming languages where you might write classes
// you might be familiar with a constructor function.

// A constructor function is basically a function that's called whenever this contract 
// is instantiated 

// <><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><><><><><><><><><><><><><><>

// Personal note: I wasn't sure what instantiated meant at this point, so I went off to look it up.
// The link to the Wikipedia page is here: https://en.wikipedia.org/wiki/Instance_(computer_science).

// I took the definition down and an example of what instantiated meant, I'll post what I wrote down below.

Instance (Computer science)
	- In a computer system, anytime a new context is created based on some model, it is said that the model has been instantiated. 
	- In practice, this instance usually has a data structure in common with other instances, but the values stored in them are separate.

 - For example.

	- Lets say there is a class.
	- Lets say its profiles on facebook,

	- Two classes
	- Nathan and Mark, 
    
    - well, the class is made based on a generic class (Facebook profile), they are the same class, 
    - but the data and values inside of those classes are different.
    
    - Nathan and Mark are instances of the facebook "profile" class.
    
    - Whenever a new profile is made, the class 'profile' is instantiated. 

// <><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><><><><><><><><><><><><><><>

// So with the context of that definition, the constructor function is called
// When the contract is instantiated or whenever the smart contract is created or deployed
// to the blockchain.

// In the newer versions of solidity we do that like this.

// We can write code inside of this constructor that is called whenever this contract is created.

// So in the constructor function we assigned the variable value to a camelCase variable name.


// ------------------------------------------------------------------------

// So this is a complete smart contract.

// This smart contract: 

// 1. sets this value whenever it's deployed so it will have some sort of default value.

// 2. Then we'll have some function that will allow us to read that value from the blockchain.

// 3. And it also has a function that allows us to create that value and write to the blockchain.

// Alright this is a complete smart contract that allows us to get and set a value.
















































































































