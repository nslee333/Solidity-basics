

Nathan's note:

This is going to be my notes / transcripts of learning the concepts and the language of Solidity.

Mostly this learning style is that I watch a video, and type the transcript out to fully learn the concepts instead of just watching the video.

This is going to be notes focused on relevant learning, I'm mostly going off of dApp universities videos, and if I don't understand a concept.
I'll look to other resources to learn that concept more in depth, and then I'll use the Feynman Technique to learn it further for my brain.

//--------------------------------------------------------------------------------------------------------------------------------------------

Table of Contents:

- Data Location in Solidity - Line 23.

- Fallback Function - line 181.

// ----------------------------------------------------------------------------------------------------------------------------------------------


https://blockheroes.dev/data-location-in-solidity/

Data Location in Solidity.

There are three "Locations" in which the EVM stores variables: 
	- STORAGE, MEMORY AND CALLDATA.

 You might have seen them in the declaration of some variables, but, 
 you've probably noticed that they are usually missing.

This doesn't mean that some variables don't have a location, 
we know that every declared variables is stored somewhere.

Also the data location rules differ according to the variables type and scope.

	- Type.
		○ Reference type: array (including strings or bytes) mapping, structures.
		○ Value type: all the others, for example, uint or bool.
	- Scope.
		○ Local variable. 
			§ Declared inside a function.
		○ Global variable.
			§ AKA state variables, declared outside of all functions.

We'll go through the following concepts of data location in Solidity.
	- Definitions and Usage.
	- Helpful facts.
	- Assignment Rules.

This information is up to date post Soliditiy ^0.8.7.

Definitions and Usage:
	
	Each Data location in Solidity has a different purpose and we should use them cautiously. 
	Keep in mind that, in some situations, Solidity strictly enforces a default location.
	
Storage 
	- When placed in storage, a variable is written on the Blockchain, Everything that is on the chain, stays there. 
	- Every contract has its own storage, so these variables are persistent.
	- Therefore you can access storage variables at all times. 
	- You can modify their value but their location is permanent, Every change is registered on the Blockchain.

Memory
	- Variables stored in memory are declared inside a function. They are temporary and their 'lifetime' 
	- is dependent on the runtime of the function they correspond to.
	- They are only accessible inside that method.
	- Their purpose is to assist calculations.

Calldata
	- Calldata is a temporary data location in Solidity. It acts like memory, in terms of its dependence 
	- on the function's execution.
	- The variables stored in Calldata are only available inside the function they are declared in.
	- On top of that, Calldata variables are not modifiable. 
	- This means that they cannot change their value.

Helpful facts.

	- There are some useful facts about data location in Solidity that might help you along the way. 
	- It is best to know them to avoid silly mistakes.

Gas.
	- Storage is the most expensive data location you can use.
	- Then there's memory which is between the two.
	- And the cheapest being Calldata.
	- Modifying storage is one of the most expensive operations you can do on Ethereum. To be memory efficient, 
	- try to minimize the number of times you alter state (global) variables.
Must do.
	- State (Global) variables always stay in storage and you cannot explicitly override that.
	- Function parameters (Including the return parameters) must be in memory or calldata.
// Prior to version ^0.6.9 data location for reference type arguments was limited to 
// calldata in external functions, memory in public functions and either memory or storage in internal and private functions.
// Now memory and calldata are allowed in all functions regardless of visibility.
	- You cannot override the location of local variables of value type. 
	- You get a parser error. By default, they sit in memory.
	- Since ^0.5.1, you must specify the location of Local variables of reference type. 
	- If you don't you will get a type error.

Assignment Rules.
	- When assigning a storage variable the value of memory (Or calldata) one, it will create a copy. The other way around is true as well.
	- Assignments between value types from the same data location (E.g. storage to storage) will make a copy.
	- For reference types, when assigning from one memory variable to another memory variable, it will create a reference. 
	- They will point to the same data location. So if you modify one of them, it will reflect in both.
	- Assigning from storage to local storage variables will also result in a reference.
-------------------------------------------------------------------------------------------------

Memory VS Storage in Solidity -  Data Location Tutorial


Memory vs. Storage.

Storage:
	- Global. 
	- Meaning that the are available globally - In other words, are available in the entire contract,
	- Inside and outside of the functions.
	- They're also stored permanently - meaning that even though it doesn't matter if you're sending a transaction or executing a function or not doing anything at all, 
	- The Ethereum Network will save your variable forever until the contract is removed.
	- State Variables (or global variables)
Memory
	- Local.
	- Temporary.
	- Local Variables.
	- AKA variables in function bodies.
	- After the function is performed, the variables assigned inside of the function will be removed from memory, making them temporary.
	- The same rule applies to arguments, they are temporarily stored in memory under 'Memory', and will be removed from memory once the
	- function execution is completed.
Now we're going to look at a smart contract in this video, and see how big of a mistake you can make when you don't understand the difference
between storage and memory.

pragma solidity 0.5.2;

contract MemoryAndStorage {
	
	mapping(uint => User) users;

	struct User{
		uint id;
		uint balance;
	}

	function addUser(uint, id, uint balance) public {
		users[id] = User(id, balance);
	}

	function updateBalance(uint, id, uint balance) public {
		User memory user = users[id];
		user.balance = balance;
		}

	function getBalance(uint id) view public returns (uint) {
		return users[id].balance;
	}
}

Alright, so after looking at this contract, the updateBalance function is what we're going to look at.

The issue is that when we use the use the updateBalance function, the new data will be stored to temporary memory, and not actually 
writting the new value to the mapping (storage).

User memory user = users[id];
user.balance = balance;

User storage user = users[id];
user.balance = balance;

One way to solve this problem is just to change the updateBalance's data location from memory to storage.

Another way to solve this issue is to modify the mapping directly.

user[id].balance = balance;

Another way we can fix this is:

User memory user = users[id];
user.balance = balance;
users[id] = user;

This is bad because the code isn't very clean and it copies back and forth unnecessarily.

//-----------------------------------------------------------------------------------------------


https://www.youtube.com/watch?v=3FY9FkJKSSI


Fallback Functions:

Let's talk Fallback Functions.

The function cannot be named, it cannot take any inputs, and it cannot return and outputs.

They must be declared with the external function modifier.

This function will be called in two situations.

1. When you call a function that does not exist.
2. When you send Ether to this contract by 'send', 'transfer' or 'call'.

In order for this contract to recieve Ether the fallback function must have the payable modifier declared.

You can write the contractFunction inside of the fallback function, but it is not recommended.


myContract{

	function() external payable { // the contract function is wrapped in the fallback function.
		contractFunction()
	}
}

The reason is that when you send Ether by 'Send' or 'Transfer' it forwards 2300 gas to this fallback function.
Which is enough gas to Emit a log, but not enough gas to write to Storage or call another contract.


contract Fallback{
	event log(uint gas);

	function() external payable { 
		// Send / Transfer (forwards 2300 gas to this fallback function)
		emit Log(gasLeft())
	}
}

In order to prove that it only forwards 2300 gas, we're going to use a special function here called gasLeft, that returns 
the remaining Gas.

We'll also update our log event to return the amount of Gas left.

We'll also create a helper function that returns the the amount of Ether stored in this contract.


contract Fallback{
	event log(uint gas);

	function() external payable { 
		// Send / Transfer (forwards 2300 gas to this fallback function)
		emit log(gasLeft())
	}

	function getBalance() public view returns (uint) {
		return address(this).balance;
	}
}

contract SendToFallback {

	// In the inputs for the Transfer function below, we'll pass in the address of the Fallback contract above.
	function transferToFallback(address payable _to ) public payable {
		_to.transfer(msg.value);
	}

	function callFallback(address payable _to) public payable {
		// We'll send Ether using the call method and make sure it was able to send the Ether.
		(bool sent,) = _to.call.value(msg.value)("");
		require(sent, "Failed to send Ether.");


	}

}



We're also going to create a contract that will send Ether to the contract above, which will trigger the fallback function.

We're going to send Ether with the Transfer method.

After we deploy these two contracts here we're going to pass in the address of the fallback contract above.

Transfer forwards 2300 Ether and later whne we actually call this function here with the Emit Log(gasLeft()); we'll be able
to see how much is left.

Sending the Ether fowards all the gas to the fallback function and in that case gas theft can be greater than 2300.

And to demonstrate this we're going create a function thats going the fallback contract above using the call method, and we'll name this 
function callFallback.



//-------------------------------------------------------------------------------------------------------------------------


Summary:


Fallback Function:
- Recieves 2300 Gas from transfer and send Methods.
- But it can recieve more gas when it is invoked by the call method.
- The Call method can forward all of the gas to the fallback function.
-- Which means that you can write code like a regular function to execute inside the fallback function
-- But it is not recommended to write much code inside the fallback function because transfer and send can fail.
-- Or it can fail if it uses too much gas.
-- Which means you won't be able to send Ether to the contract using the send or transfer method.

// -----------------------------------------------------------------------------------------------------------------------------------

Fallback Functions Documentation

https://docs.soliditylang.org/en/latest/contracts.html?highlight=fallback%20function#fallback-function

A contract can have a most one fallback function, 
- declared using the fallback() external [payable] or 
- fallback(bytes calldata _input) external [payable] returns (bytes memory _output) 


- Both without the function keyword.
- This function must have the External visibility.
- A fallback function can be:
	- Virtual.
	- Can override.
	- Have Modifiers.

The fallback function is executed on a call to the contract if none of the other functions match the given function signature, 
- or f no data was supplied at all and there is not receive Ether function.
- The fallback function always recieves data but in order to also recieve Ether it must be marked 'payable'.

--

If the version with the parameters is used, _input will contain the full data sent to the contract (equal to msg.data) and can return in
_output. 

The returning data will not be ABI encoded, instead it will be returned without modifications (not even padding).

In the worst case, if a payable fallback function is also used in place of a recieve funtion, it can only rely on 2300 gas being available. 
(See above tutorial.)

Like any function, the fallback function can execute complex operations as long as there is enough gas passed into it.

//-----------------------------------------------------------------------------------

Fallback functions explained.

https://www.geeksforgeeks.org/solidity-fall-back-function/

The solidity fallback function is executed if none of the other functions match the function identifier or no data was provided with the function call.

Only one unnamed function can be assigned to the contract and it is executed whenever the contract receives Ether without any data.

To recieve Ether and add it to the total balance of the contract, the fallback function must be marked payable.

If no such function exists, the contract cannot recieve Ether through regular transactions and will throw an exception.

Properties of a fallback function:

1. It has no name or arguments.
2. If it is not marked with the payable modifier, the contract will throw an exception if it recieves plain Ether without data.
3. Cannot return anything.
4. Can be defined once per contract.
5. It is also executed if the caller meant to call a function that is not available.
6. It is mandatory to mark it external.
7. It is limited to 2300 Gas when called by another function. It is so for as to make this function call as cheap as possible.

Example Code.

pragma solidity ^0.4.0;

contract myContract {
	uint x,

	mapping(address => uint) balance;

	constructor() public {
		x=10;
	}
	
	function setX(uint _x) public returns (bool){
		x = _x;
		return true;
	}


	// This fallback function will keep all of the Ether.

	function() public payable {
		balance[msg.sender] += msg.value;
	}
}


contract Sender {
	function transfer() public payable {
		// Address of the myContract;
		address _reciever = 0xbcc0185441de06F0452D45AEd6Ad8b98017796fb;

		// Transfers 100 Eth to the above contract.
		_reciever.transfer(100);
	}
}


Explination:

1. Contract myContract: 

- It has the variable x which is set to the default value 10 in this constructor(). The contract has a function called setX(uint_x) which
sets the function value to the desired parameter sent during the function call.

// In other words, the variable x is set in the beginning using the constructor function.
// And the setX function sets the value of x to whatever you input into the argument of the setX function.

The below declaration creates address to value map called balance which maps the address to their balance.

mapping(address => uint) balance;

2. Contract Sender.

- This is a complete different and independent contract. It sends a value in Ether to the myContract.
- This contract does not know the mechanism of the myContract.
- Sending a transaction without any message and only Ether can cause an error.

- The below statements declare a variable _reciever of the address type.
- It explicitly stores the address of the contract myContract.
- Then it uses address.transfer(value) to transfer Ether to the contract.

address _reciever = 0xbcc0185441de06F0452D45AEd6Ad8b98017796fb; // Address of the myContract.

_reciever.transfer(100);

3. Function public payable.
the function below is a fallback function. It is declared payable which allows it to accept transfer value.
It is called in two cases.

1. A contract recieves only Ether and no data.
2. No function calls matcheded even through the account recieved data.

This helps us to protect the function from throwing an error.

In this program, the contract recieves only Ether and the fallback function uses the value recieved to add to the
balance related to the sending address.

function() public payable {
	balance[msg.sender] += msg.value;
}





//-------------------------------------------------------------------

Solidity address

it comes in two flavors, which are largely identical.

address holds a 20 byte size, (size of an Ethereum adress).

address payable, is largely the same but with the additional members transfer and send.

The idea behind the distinction, is that payable address is an address you can send Ether to.

//------------------------------------------------------------------------

https://www.natchineth.com/post/solidity-function-specification-and-modifiers/

Solidity function visibility 
Specifications and Built in Modifiers.

What's the difference between Solidity Function Visibility (Public, External, Private and Internal)?
What should you use one over the other?
How do you know when to use Solidity Modifiers(pure, view)?

Solidity functions are usually of the following form, where it specifies a function visibility and a modifier attributed to a certian function.

This blog post goes into detailed function visibility specifiers(Public, External, Private, Internal) and a few select modifiers (pure, view)
that often cause confusion between developers.

// ----------------------------------------------------------------------------------------

Public Visibility.

In Solidity, the Public keyword is used for functions where they can be called by any external account and any internal/external contract on the 
Blockchain.

This means that public functions are used in cases where a function is expected to provide information to anyone who calls it.

A good example where a public function may be useful is in cases where variables are being accessed or overall state changes.

By looking at the ERC-20.sol token implementation, there are a variety of functions below that are public. An example of public functions used in the 
standard are below:

function transfer(addres recipient, uint256 amount) public virtual override returns (bool) {
	_transfer(_msgSender(), recipient, amount);
	return true;
}

The transfer()function can be called by anyone with an external address(one in a wallet) and any contract to transfer token funds from the sender
to a certain recipient.

The public modifier on this function ensures that there are no access control restrictions on who can call this function.

//----------------------------------------------------------------------------------------------

External functions

External functions are set on functions that can only be called by an external account or external contract.

This means that, for contract A, if it has a function b(), no functions in A can access b().

b() can be called by externally owned addresses or contracts that are not related to A, but the external keyword prevents all other functions 
in the same contract from calling it.

A prevalent example of external functions are in the IERC20.sol contracts, which are interfaces that specify ERC-20 Implementation.

function transfer(address recipient, uint256 amount) external returns (bool);

Similar to interfaces in other OOP languages, interfaces define the behaviour of a certain contract and do not conatin implementation details.

The ERC20 interface transfer() function specifies that the implementation contract must have a transfer() function, which takes the same arguments and 
returns the same values.

The External specification ensures that the interface cannot call its own functions (which is not possible due to the interface not containing implementation.)

This does allow other contracts outside of this function to call this function.

Solidity under the hood for public and external functions:

Internal functions in Solidity are executed via JUMP, which means that the  arguments for the function are expected to be located in memory.

According to the Ethereum Yellowpaper, a JUMPDEST call uses 1 unit of gas.

External functions in Solidity do not use internal functions, thus do not need to keep arguments in memory.

This information can be read from the CALLDATA of the transaction, as there's no need to store this in memory for another function to interact with.

When considering the contruction and access control on public functions, one could reason that a public function is one that is External and Internal.

This construction makes it significantly easier for us to understand why public functions consume more gas.

Since public functions can be called by the contract itself, it will always save the arguments in memory. 

This means that the gas consumption by a public function should be expected to be higher than an external function.

//------------------------------------------------------------------------------------------------------------------

Internal Functions.

Internal functions can only be accessed by the contract the function resides in, and the children of the contract.

In the case of class hierarchy, this function can be called by inherited contracts but not external accounts or external contracts.

These functions are typically helper functions, which is called by external/public functions.

By taking a look at the native ERC20.sol token implementation on OpenZeppelin, there are two transferring functionalities (as see in transfer 
and trasferFrom). Both of these functions make use of the internal _transfer() functionality, which serves as a helper function for this contract
and all other implemented inheritences of the ERC-20 token (which has the added option of being cappable, pausable etc.).

Through this ERC20 token code, we can take a deeper look into what the difference between internal and public functions are:

	function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
		_transfer(_msgSender(), recipient, amount);
		return true;
	}
	function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
		_transfer(sender, recipient, amount);
		_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: Transfer amount exceeds allowance"));
		return true;
	}
	function _transfer(addres sender, address recipient, uint256 amount) internal virtual {
		require(sender != address(0), "ERC20: Transfer from the zero address.");
		require(recipient != address(0), "ERC20: Transfer to the zero address");

		_beforeTokenTransfer(sender, recipient, amount);

		_balances[sender] = _balances[sender].sub(amount, "ERC20: Transfer amount exceeds balance.");
		_balances[recipient] = _balances[recipient].add(amount);
		emit Transfer(sender, recipient, amount);
	}

The transferFrom() and the transfer() function both have public visibility on them, which ensures that these functions can be called by anyone.

Both of these functions also call an internal _transfer() function, which performs the transfer functionality.

the _transfer() function is a helper function to the other two functions, which provides transfer implementations.

The internal visibility on the _transfer() function ensures that the function can only be called within the ERC20 Token Implementation.

This ensures that external accounts and external contracts are unable to invoke this function.

//-------------------------------------------------------------------------------------------------------------------------------

Private Functions.

Functions with a private visibility are an even smaller subset of internal functions, specifiying that the function can ONLY be called inside the 
contract itself.

These functions are typically helper functions, with an even smaller scope of access control - limiting to the contract code that it is located in.

Private functions should bne called by functions that have a winder access scope (such as Internal, Public or External) - with the contents of the 
function calling a private function.

An example of a private function can be seen in ERC20Snapshot.sol as a part of the OpenZeppelin lubrary, where the _burn() internal function invokes
private functions in the contract.

	function _burn(address account, uint256 value) internal virtual overrride {
		_updateAccountSnapshot(account);
		_updateTotalSupplySnapshot();

		super._burn(account, value);
	}
	function _updateAccountSnapshot(address account) private {
		_updateSnapshot(_accountBalanceSnapshot[account], balanceOf(account));
	}
	function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {
		uint256 currentId = _currentSnapshotId.current();
		if (_lastSnapshotId(snapshots.ids)< currentId>) {
			snapshots.ids.push(currentId);
			snapshots.values.push(currentValue);
		}
	}

This example above demostrates the expected flow of private functions, where the _burn() function can be invoked by any of the inherited ERC20 contracts.

In the function, it calls a private helper function, which updates the snapshot data on the ERC20 balances at a certian point in time.

In this case, there was a specific design decision chosen to keep all the snapshot functionality private to the ERC20Snapshot.sol file, since no other
ERC20 implementations understand the concept of a snapshot.

//----------------------------------------------------------------------------------------------------------------------------------------------

Solidity Function Modifiers.

Aside from function visibility specifiers, there is an important difference between 'pure' and 'view' modifiers that are provided in Solidity.

-- View --

a function with a view modifier specifies that the function must never "modify state". As this definition of "modification of state" can be ambigious,
here are a few actions that are NOT allowed in view functions.

These are NOT allowed in a View function.

1. Writing to a variable in a contract - this implementation is SAVING STATE.
2. Emitting events - events are often emitted to notify event listeners that a contract state has changed.
3. Sending Ether to another address - transfering Ether among addresses changes the state of an Ether balance.
4. Calling a non view / pure function - all functions that a view function calls must also no change state of contracts.
5. Using a STATICCALL - similar to (4), where the implementation/function may change the state of an object/contract.

A good example of a view function is a getter function that returns state information from a certian contract.

In ERC20.sol, there are a few getter functions, including retrieving token supply for a specific address.

	mapping (address => uint256) private _balances;
	function balanceOf(address account) public view ovverride returns (uint256) {
		return _balances[account];
	}

the balanceOf() function returns the token balance attributed to a given address, returning one of the entries in the _balance mapping.

-- Pure --

A function with a pure modifier specifies that the function must never modify AND access state.

A pure modifier is stricter than a view modifier, which ensures that the internal state of a contract can never be accessed.

In addition to the list of actions that view functions are not allowed to do, a pure function adds some more.

A Pure function has the same list of actions that are NOT allowed, as well as the following.

1. View or modify state - pure functions may perform calculations but are not allowed to access internal contract state.
2. Accessing contract Ether balance - cannot perform checks related to the balance of addresses.
3. Unable to access block, tx, msg data - unable to access transaction information (tx.origin) or msg information (msg.sender).

The specifications of a "Pure" function are from functional programming, where functions' arguments define the scope. This means that the function must be
able to execute solely with the arguments it has recieved, without accessing contract state or contract data.

A good example of a pure function is the SafeMath library, which provides mathematical checks to ensure that the variables do not overflow/underflow 
after performing mathematical calculations such as adding:

	function add(uint256 a, uint256 b) internal pure returns (uint256) {
		uint256 c = a + b;
		require(c >= a, "SafeMath: addition overflow");

		return c;
	}

The add() function showcased above is a pure function, as it recieves all the variables that it requires to check for overflow.

Given the uint256 a and uint256 b, the add function returns the result of the addition, given that the value has not overflowed.

//-----------------------------------------------------------------------------------

msg.sender and other examples.

In Solidity there are special variables and functions which always exist globally, and are used to provide information about the Blockchain.

They can be used to assist with error handling, employ mathematical and cryptographic funtions, and present information about contract addresses
and the contracts themselves.

The msg global variables in partiocular are special global variables that contrain properties which allow access to the Blockchain.

For instance msg.sender is ALWAYS the address where the current function call came from.

// E.g. If i called and function in a smart contract, then my address would be msg.sender.

For example: let's look at this code,

below, we're using a mapping of user addresses and their associated levels in this game application,

mapping(address => uint) public userLevel;

This function below will advance the user to the next level.

function incrementLevel() internal {
	userLevel[msg.sender]++;
}

You'll notice in this example we're using the msg.sender global variable to get the current user's address.

Along with msg.sender there are other msg special global variables that are useful:

- msg.data - the complete CALLDATA which is non-modifiable, non-persistant area where function arguments are stored and behave mostly like memory.
- msg.gas - returns the available gas remainin for a current transaction.
- msg.sig - the first four bytes of the CALLDATA for a function that specifies the function to be called (i.e., its a function identifier).
- msg.value - the amount of wei sent with a message to a contract (wei is a denomination of Eth.)

//-----------------------------------------

Function overloading.

Function overloading is when you have the same variable name for
multiple functions, but the parameters (inputs) and outputs are 
different.


