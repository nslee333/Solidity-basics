Recursive Length Prefix:
	-  Serialization is the process of encoding data structures into byte sequences.
	-  It is also referred to as marshalling and pickling. Serialization is necessary when storing and sending data structures.
	- RLP is serialization format created by Ethereum developers for storage and communcations. It is used for all data structures such as accounts, transactions and blocks. RLP is simpler than the alternatives such as extensible markup language (XML) Javascript Object Notation (JSON), Binary JSON (BSON), protocol buffers and bencode.

	- RLP is also consistent. The same inputs are always converted to the same byte sequences. This is not true of all Serialization formats. For  example, when encoding sets of key, value pairs, some schemes do not specify an ordering.
	- RLP operates on the byte sequences and lists. Lists can contain byte sequences and other lists. The interpretation of all inputs is handled by other protocols. For byte sequences, small headers are added which depend on the length. For lists, the elements are encoded separately and concatenated. As with byte sequences, small headers are added which depend on the length. Lastly all lengths are encoded in big endian format.
Here are python functions which implement RLP encoding and decoding.

import math

N_BITS_PER_BYTE = 8

def n_bytes(integer):
    // Finds the numbers of bytes needed to represent integers.
        

    return math.ceil(integer.bit_length() / N_BITS_PER_BYTE)


def get_len(input, extra):
    // Finds the lengths of the longest inputs using the given extra values.

    n_bytes = input[0] - extra
    
    return 1 + n_bytes + int.from_bytes(input[2:2 + n_bytes], "big")
def rlp_decode(input):
    // Recursive length prefix decodes inputs.

    if input[0] < 128:
        result = input
    elif input[0] < 184:
        result = input[1:]
    elif input[0] < 192: 
        result = input [1 + (input[0] - 183): ]
    else:
        result = []
        if input[0] < 248:
            input = input[1:]
        else:
            input = input[1 + (input[0] - 247):]
        while input:
            if input[0] < 128:
                len_ = 1
            elif input[0] < 184:
                len_ = 1 + (input[0] - 128)
            elif input[0] < 192:
                len_ = get_len(input, 183)
            elif input[0] < 248:
                len_ = 1 + (input[0] - 192)
            else:
                len_ = get_len(input, 247)
                result.append(rlp_decode(input[:len_]))
                input = input[len_:]

    return result

Notice that the functions are recursive. Notice also that the functions work for inputs requiring up to
about 18 million terabytes. Here are examples of their usage.

RLP is an elegant and approachable serialization format used extensively by the ETC. It can be
quickly mastered thereby illuminating this important aspect of the system.





