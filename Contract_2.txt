Introduction

This is the second smart contract for this tutorial:
https://www.youtube.com/watch?v=ipwxYa-F1uY&t=44s

----------------------------------------------------------

The first thing we're going to do in this video is that we're
going to update the contract code that we wrote before to to the latest
version of solidity.

Solidity 0.5.1.

Okay so we can read the error in remix IDE, and it gives us two
type errors.

TypeError: data location must be "memory" for return parameter in function but none was given.

The error is noted at line 19 and line 25.

All we have to do to fix this error is to add memory to the return parameter.

Using the Remix IDE, we compiled the contract and the error is fixed.

Now we're going to get going on the main focus of this video, we're going to
be covering the basic data types and data structures in Solidity.

First thing we're going to go over is the different ways we can go over
state variables.

At the top of the contract we have the state variable 'string value'
that we declared and set it and retrieved the values.

Solidity has a shortcut where you don't even need the get function.

You can basically read it for free.

We're going to add the public keyword on the end of the state variable.

The public keyword is declaring the visibility of the state variable.

After compiling the code, and deploying it onto a blockchain we can see it on the remix
IDE that you can read the code for free.

We can also just add a default value, so let's look at this.

We're going to delete the constructor function because we don't need it.

We're also going to define the string value to 'myValue' inline on the state variable.

We can also set the string value to constant to make the variable immutable.

We'll define the variable as a constant inline on the state variable declaration.

Now let's look at some different data types in Solidity.

We updated the string to stringValue.

Alright let's explore some different types, so we can have a Boolean value in Solidity.

Booleans:

Integers can be signed and unsigned.

The difference between a int (Integer), and a uint (Unsigned Integer).

Int can be signed.

Uint can be unsigned.

What does that mean? Well, a int can be signed, in other words, can be a negative
number.

An int can be -1. The negative sign is the "sign" in the signed or unsigned integer.



string public stringValue = "myString";
    bool public myBool = true;
    int public myInt = -1;
    uint8 public myUint8 = 8;
    uint256 public myUint256 = 99999;

So that is some of the basic data types.

Enum - Enum means enumerated list and it will allow us to keep
a set






















