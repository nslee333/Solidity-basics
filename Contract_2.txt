Introduction

This is the second smart contract for this tutorial:
https://www.youtube.com/watch?v=ipwxYa-F1uY&t=44s

----------------------------------------------------------

The first thing we're going to do in this video is that we're
going to update the contract code that we wrote before to to the
latest
version of solidity.

Solidity 0.5.1.

Okay so we can read the error in remix IDE, and it gives us two
type errors.

TypeError: data location must be "memory" for return parameter 
in function but none was given.

The error is noted at line 19 and line 25.

All we have to do to fix this error is to add memory to the
return parameter.

Using the Remix IDE, we compiled the contract and the error 
is fixed.

Now we're going to get going on the main focus of this video, 
we're going to be covering the basic data types and 
data structures in Solidity.

First thing we're going to go over is the different ways we can go over
state variables.

At the top of the contract we have the state variable 'string value'
that we declared and set it and retrieved the values.

Solidity has a shortcut where you don't even need the get function.

You can basically read it for free.

We're going to add the public keyword on the end of the state variable.

The public keyword is declaring the visibility of the state variable.

After compiling the code, and deploying it onto a blockchain we can see it on the remix
IDE that you can read the code for free.

We can also just add a default value, so let's look at this.

We're going to delete the constructor function because we don't need it.

We're also going to define the string value to 'myValue' inline on the state variable.

We can also set the string value to constant to make the variable immutable.

We'll define the variable as a constant inline on the state variable declaration.

Now let's look at some different data types in Solidity.

We updated the string to stringValue.

Alright let's explore some different types, so we can have a Boolean value in Solidity.

Booleans:

Integers can be signed and unsigned.

The difference between a int (Integer), and a uint (Unsigned Integer).

Int can be signed.

Uint can be unsigned.

What does that mean? Well, a int can be signed, in other words, can be a negative
number.

An int can be -1. The negative sign is the "sign" in the signed or unsigned integer.



string public stringValue = "myString";
    bool public myBool = true;
    int public myInt = -1;
    uint8 public myUint8 = 8;
    uint256 public myUint256 = 99999;

So that is some of the basic data types.

Enum - Enum means enumerated list and it will allow us to keep
track of a set list of things in our contract. We'll take a look on what this means.

Added enum State { Waiting, Ready, Active}. 

This allows us to keep a list of these three states of the contract inside the smart
contract.

We'll be able to reference this to check the state of the contract.

This allows us to set or reference the state of the contract in the code copied below.

// ---------------------------------------------------------------------
Raw code:

contract myContract {
    enum State{ Waiting, Ready, Active } 
    State public State; 


    constructor() public {
        state = State.Waiting; 

    }
    
    function activate() public {
        state = State.Active; 

    }

    function isActive() public view returns(bool) {
        return state == State.Active; 
    } 
}

//------------------------------------------------------------------------------------------------------------

Code explained:

contract myContract {
    enum State{ Waiting, Ready, Active }
    
     // Enum list of States of the smart contract.
    
    State public State; 
    
    // We'll be able to access this publicly with the getter.


    constructor() public { 
        
        // When constructing the contract, we set the default state to Waiting below.
        
        state = State.Waiting; 
        
        // Sets the default State to Waiting.

    }
    
    function activate() public { 
        
        // Function to activate the smart contract.

        state = State.Active; 
        
        // Updates the State of the Smart Contract when this function is called.

    }

    function isActive() public view returns(bool) {
        
        function declaration, public visibility, (visible to anyone on the Blockchain.) ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
        
        return state == State.Active; 
        


        // Note, since this list is enumerated, then this will return an index value of the State enum list.
    } 
    

// So it will return 0 if the contract is Waiting.
}

Alright so now, we're going to explore structs.

Structs is a way in Solidity to define our own data structures.

This allows us to model our own sort of arbitrary data.

We're going to have a Person Struct.

This Struct(Person) is going to have several attributes such as.
First name, Last Name both strings. 

We can put these structs inside of Mappings and Arrays.

In this, We've declared the data type Person inside the smart contract with a struct.
thats going to have a first name and a last name.

So lets create a function that can instantiate a new Person. Create a new one and 
actually keep track of a bunch of these person structs inside of a people array.

First let's create a Person[] array, we'll call it people, and we'll make it public so you can
read it outside of the Smart Contract.

It's a data type of this person.

Person is a struct, and the Person[] Array contains different instances of the Person struct.

It's stored with the 'people' State Variable.

We're going to create a function for adding a person to the Person[] array.

We're going to add it with a function, with the parameters for the instance for that person.

So we'll pass into the function, the first name and last name of that person.

Then we'll add that person into the Array with the people.push() method.

This adds the person onto the end of the array.

We'll declare the struct data type Person, and the first and last name of that person to add that person to the people array.

String declares the data type.


The thing is with the arrays in Solidity is that you can't read them.
So we'll create a function for displaying the count of the array, and since its indexed, we can read the contents
of that instantiation.

We'll add uint256 public peopleCount, and inside the addPerson function.
We'll increase the peopleCount by an increment of one.

//-----------------------------------------------------------------

contract myContract {
    
    Person[] public people; 
    // People is a state variable here, and it's public so we can read it ouside of the smart contract.

    uint256 public peopleCount;

    struct Person {
        string _firstName;
        string _lastName;

    }

    function addPerson(string memory _firstName, string memory _lastName) public {
        people.push(Person(_firstName, _lastName));
        people.Count += 1;
    }
}

//----------------------------------------------------------------


Alright we're going to do the same thing with this code, but instead of using an Array.
We're going to use a mapping.

So what is a Mapping? Mapping is an associative array.

(https://brilliant.org/wiki/associative-arrays/)

(An Associative Array, also called maps or dictionaries, is an abstract data type
that can hold data in (key, value) pairs. )

A mapping is essentially a key/value data type.

mapping(uint => Person) public people;


Uint is the key, and the Person is the value.

mapping is an associative array that is structured with a key value pair.

The key is going to be an unsigned integer, We'll treat this like an id. 

It will be our Database lookup where we have an ID and a record.

When we call up the ID we'll call up a record or in this case a struct.

It will be public with the variable name people.

In this mapping, it is based on 1 based indexing, so our first entry will be index of 1.

We'll dive a little more into structs.

We need to keep count of peopleCount because there's no way to know the size of the mapping
in Solidity. 

Basically any key that doesn't have a value set for it it's going to turn a default value which would be
an empty struct.

So if we go into the deployed contract in Remix, and ask for index position 100 when we only added two people Then
it will default value. 

Since there is no way to see how many are in a mapping, its good to have a counter cache so we can see exactly how many
entries are in the mapping.


Copy of the code.

contract myContract {
    uint256 public peopleCount = 0;
    
    mapping(uint => Person) public people; 


    struct Person {
        uint _id;
        string _firstName;
        string _lastName;
    }

    function addPerson(string memory _firstName, string memory _lastName) public {
        peopleCount += 1;
        people[peopleCount] = Person(peopleCount, _firstName, _lastName);

    }
}


Part 3 ----------------------------------------------------------------------------------------------------------------------------

In this part we're going to use the same contract and go over the modifiers a bit more to help our understanding of the language.

Public modifier.

Public is a function that can be called - basically the public interface at the smart contract.

Public modifier makes the function in the smart contract to be visible and available to anyone who has access to the blockchain.

So now we're going to look at a private function or internal function.

So the incrementCount() function is an example of an internal (or private) function,
no one outside of the contract can use that function.

This is a great example of visilbility and scope in Solidity.

Let's talk about function modifiers.

So modifiers are keywords that we can add to the function to change the way it behaves.

We're going to look at an example.

We're going to create our own custom modifier inside of this smart contract.
So that only certain people can call this add person function.

We're going to make this smart contract have an owner or an admin for it.

We're going to modify the addPerson() function so that only the owner/admin can call this function.

We're going to add the onlyOwner modifier on the end of the function whenever we want to restrict the 
function usability to the ownerOnly.

This onlyOwner modifier doesn't exist yet so let's make that.

We added the address owner;

the address keyword is another data type in solidity.

We're just declaring it on line 8 and we're going to set it inside the constructor.

Inside the modifier onlyOwner we're going to create the logic for this modifier.

So how do we know who's calling the function? How can we build the logic to figure that out?

Well Solidity hasa global keyword called MSG. 

Which basically stands for the function metadata thats passed in.

We're not going to pass in any meta data here it's going to be implied.

We have access to msg.sender. 

This is basically a special thing inside of solidity that tells us the account, or it's address.
Or basically who called the function.

And basically we can just say is this the owner?

In this we compare the equality of the person who's calling 
the function with the owner which we're going to define.

If the function caller is not the owner we want to throw an error.

We want to trigger an error if this person calling the function
is not the owner.

We basically want to revert the transaction.

So in the onlyOwner modifier we're going to wrap the msg.sender 
== owner in the require function.

How the require function works is that if the arguments passed
in are equal to true, then it allows it to run, and if it is
false then the function is not allowed to run.

In automotive terms, the onlyOwner modifier will essentially be
the keychip inside of the ignition key that only allows the 
start of the car (function in this case) when it is present.

Or --
function require() {
    if (msg.sender == owner) {
        return True;
    } else
        return false;
}

Whenever we use the require(ZZZZZZZZZZ) whatever the argument 
has to be true.

When the error is triggered it reverts the transaction (running
the code), and keeps the person from paying the gas fees.

Whenever the contract is deployed the constructor is run and 
the msg.sender is actually the account that deploys the smart
contract.

And the msg.sender is going to be set to the owner state variable.

That same owner address is the only address that will be allowed
to call and use that function.

Alright so I'm going to explain this in a way that makes sense to
me. 

The constructor function gets called whenever the contract is
deployed.

Inside the constructor() function, we set the owner to the
msg.sender keyword.

Which when we compile and deploy the contract, the person who
deploys it (msg.sender) gets set as the owner of the contract.

So now we're going to work with Time in Solidity.

So instead of the onlyOwner modifier where only the owner can 
run the function, lets say, the function can only run after a
certain amount of time has passed.

So instead of onlyOwner we can say that this contract is only
open at a certain time.

So with this modifier, when the function is modified with this
the function will only be called after we have have passed
a certain time in history, and if it's before that specified
time, then the function will not work, it will throw an error.

So this is super useful when you're doing a crowd sale for An
NFT or an ICO contract.

So we need to set the openingTime. 

Time stamps are expressed in seconds in Solidity.

Seconds in what? Well its Epoch time (AKAUNIX time), 
if you're not familiar with that in Computer science.

Epoch time is a system for describing a point in time.

It is the number of seconds that have elapsed since the unix
time epoch, excluding leap seconds. The unix epoch is 
the 1st of january 1970 (an arbitrary date.) 

Unix time is non-linear with a leap second having the same unix
time as the second before it.

Everyday is treated as if it contains 86,400 seconds.

The difference between UTC and Unix Epoch time is that Unix
time treats leap seconds differently than UTC, so it is not the same.

So, with the Data type uint256 we can set the openingTime to Epoch time
and the contract opens for use at that time.

But what about setting the opening time to the current time, instead of
epoch time? Well, the best way to do that is to use the Block's time 
stamp.

So with the global function in solidity Block.timestamp we can achieve
that openingTime set to the curren time. 

Basically we're going to modify this modifier and say that you can use
this addPerson function after this Epoch timestamp.

And if the timestamp is before that timestamp, then the function will 
not run.

Here's a copy of the Smart Contract after the tutorial ended.



pragma solidity ^0.5.1; 


contract myContract {
    uint256 public peopleCount = 0;
    mapping(uint => Person) public people; 

    uint256 openingTime = 1636076813;


    modifier onlyWhileOpen() {
        require(block.timestamp >== openingTime);
        _;
    }

    struct Person {
        uint _id;
        string _firstName;
        string _lastName;
    }

    function addPerson(
    string memory _firstName,
    string memory _lastName
    ) 
        public 
        onlyWhileOpen 
    {
        incrementCount();
        people[peopleCount] = Person(peopleCount, _firstName, _lastName);
    }

    function incrementCount() internal {
        peopleCount += 1;
    }
}

//----------------------------------------------------------------------


Here's the explained code.




pragma solidity ^0.5.1; 

// 

contract myContract {
    uint256 public peopleCount = 0;
    mapping(uint => Person) public people; 

    uint256 openingTime = 1636076813;


    modifier onlyWhileOpen() {
        require(block.timestamp >== openingTime);
        _;
    }

    struct Person {
        uint _id;
        string _firstName;
        string _lastName;
    }

    function addPerson(
    string memory _firstName,
    string memory _lastName
    ) 
        public 
        onlyWhileOpen 
    {
        incrementCount();
        people[peopleCount] = Person(peopleCount, _firstName, _lastName);
    }

    function incrementCount() internal {
        peopleCount += 1;
    }
}



































